services:
  # 개발환경용 데이터베이스들
  auth-db:
    image: postgres:14-alpine
    container_name: microboard-auth-db
    environment:
      POSTGRES_USER: authuser
      POSTGRES_PASSWORD: authpass
      POSTGRES_DB: authdb
    ports:
      - "5432:5432"
    volumes:
      - auth-db-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - microboard-network

  post-db:
    image: postgres:14-alpine
    container_name: microboard-post-db
    environment:
      POSTGRES_USER: postuser
      POSTGRES_PASSWORD: postpass
      POSTGRES_DB: postdb
    ports:
      - "5433:5432"
    volumes:
      - post-db-data:/var/lib/postgresql/data
    networks:
      - microboard-network

  comment-db:
    image: postgres:14-alpine
    container_name: microboard-comment-db
    environment:
      POSTGRES_USER: commentuser
      POSTGRES_PASSWORD: commentpass
      POSTGRES_DB: commentdb
    ports:
      - "5434:5432"
    volumes:
      - comment-db-data:/var/lib/postgresql/data
    networks:
      - microboard-network

  # 백엔드 서비스들
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
      target: development
    container_name: microboard-auth-service
    environment:
      - DB_HOST=auth-db
      - DB_PORT=5432
      - DB_NAME=authdb
      - DB_USER=authuser
      - DB_PASSWORD=authpass
      - JWT_SECRET=dev-jwt-secret-key-change-in-production
      - NODE_ENV=development
      - PORT=3001
      - CORS_ORIGIN=http://localhost:3000
    ports:
      - "3001:3001"
    depends_on:
      - auth-db
    volumes:
      - ./auth-service:/app
      - /app/node_modules
    networks:
      - microboard-network

  post-service:
    build:
      context: ./post-service
      dockerfile: Dockerfile
      target: development
    container_name: microboard-post-service
    environment:
      - DB_HOST=post-db
      - DB_PORT=5432
      - DB_NAME=postdb
      - DB_USER=postuser
      - DB_PASSWORD=postpass
      - AUTH_SERVICE_URL=http://auth-service:3001
      - NODE_ENV=development
      - PORT=3002
      - CORS_ORIGIN=http://localhost:3000
    ports:
      - "3002:3002"
    depends_on:
      - post-db
      - auth-service
    volumes:
      - ./post-service:/app
      - /app/node_modules
    networks:
      - microboard-network

  comment-service:
    build:
      context: ./comment-service
      dockerfile: Dockerfile
      target: development
    container_name: microboard-comment-service
    environment:
      - DB_HOST=comment-db
      - DB_PORT=5432
      - DB_NAME=commentdb
      - DB_USER=commentuser
      - DB_PASSWORD=commentpass
      - AUTH_SERVICE_URL=http://auth-service:3001
      - POST_SERVICE_URL=http://post-service:3002
      - NODE_ENV=development
      - PORT=3003
      - CORS_ORIGIN=http://localhost:3000
    ports:
      - "3003:3003"
    depends_on:
      - comment-db
      - auth-service
      - post-service
    volumes:
      - ./comment-service:/app
      - /app/node_modules
    networks:
      - microboard-network

  # API Gateway (개발환경용)
  api-gateway:
    build: # Dockerfile을 사용하여 이미지를 빌드하도록 변경
      context: ./api-gateway # Dockerfile이 있는 디렉토리 경로
      dockerfile: Dockerfile # Dockerfile 이름 (기본값이므로 생략 가능)
    container_name: microboard-api-gateway
    ports:
      - "8080:80" # 호스트의 8080 포트를 컨테이너의 80 포트로 매핑
    depends_on:
      - auth-service
      - post-service
      - comment-service
    networks:
      - microboard-network
    restart: unless-stopped

  # 프론트엔드 (개발 서버)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: microboard-frontend
    ports:
      - "3000:3000"
    networks:
      - microboard-network
    depends_on:
      - api-gateway  # API Gateway가 먼저 실행되도록

networks:
  microboard-network:
    driver: bridge

volumes:
  auth-db-data:
  post-db-data:
  comment-db-data: