events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # DNS 해결을 위한 resolver 설정 (Docker 내부 DNS)
    resolver 127.0.0.11 valid=30s ipv6=off;

    # 로그 설정
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" rt=$request_time '
                    'upstream_addr="$upstream_addr"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # 기본 설정
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    client_max_body_size 10M;

    # Gzip 압축
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_types
        application/javascript
        application/json
        text/css
        text/javascript
        text/plain;

    server {
        listen 3000;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html index.htm;

        # API Gateway 연결 변수 (런타임에 DNS 해석)
        set $api_gateway "api-gateway:80";

        # 헬스체크 엔드포인트
        location /health {
            access_log off;
            return 200 "frontend healthy\n";
            add_header Content-Type text/plain;
        }

        # 🔥 핵심: API 프록시 설정 (trailing slash 자동 처리)
        location /api {
            # 디버깅 헤더
            add_header X-Debug-Proxy "frontend-to-api-gateway" always;
            add_header X-Debug-Request-URI "$request_uri" always;

            # API Gateway로 프록시
            proxy_pass http://$api_gateway;
            proxy_http_version 1.1;

            # 기본 헤더들
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # 🔥 중요: 인증 및 콘텐츠 헤더 전달
            proxy_set_header Authorization $http_authorization;
            proxy_set_header Content-Type $http_content_type;
            proxy_set_header Accept $http_accept;
            proxy_set_header Origin $http_origin;

            # 타임아웃 설정
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # 🔥 재시도 설정 (연결 실패 시 자동 재시도)
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
            proxy_next_upstream_timeout 5s;
            proxy_next_upstream_tries 2;

            # 캐시 무효화
            proxy_cache_bypass $http_upgrade;
        }

        # API Gateway 연결 테스트
        location /debug/api {
            access_log off;
            proxy_pass http://$api_gateway/health;
            proxy_connect_timeout 3s;
            proxy_read_timeout 3s;
            add_header X-Debug-Test "api-gateway-connection" always;
        }

        # 네트워크 진단
        location /debug/network {
            access_log off;
            return 200 '{
                "status": "ok",
                "timestamp": "$time_iso8601",
                "server": "frontend-nginx",
                "api_gateway": "$api_gateway"
            }';
            add_header Content-Type application/json;
        }

        # 정적 파일 최적화
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }

        # favicon 처리
        location = /favicon.ico {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
            try_files $uri =204;
        }

        # React Router SPA 지원 (모든 경로를 index.html로)
        location / {
            try_files $uri $uri/ /index.html;

            # SPA는 캐시하지 않음
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # 에러 페이지
        error_page 404 /index.html;
        error_page 500 502 503 504 /50x.html;

        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}