events {
    worker_connections 1024;
}

http {
    # 기본 설정
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 로그 형식 설정
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # 성능 최적화
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;

    # Gzip 압축
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied any;
    gzip_types
        application/javascript
        application/json
        application/xml
        text/css
        text/plain
        text/xml;

    # 보안 헤더
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # 업스트림 서버 정의
    upstream auth_service {
        server auth-service:3001 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    upstream post_service {
        server post-service:3002 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    upstream comment_service {
        server comment-service:3003 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    upstream frontend_service {
        server frontend:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Rate Limiting 설정
    limit_req_zone $binary_remote_addr zone=api_general:10m rate=20r/s;
    limit_req_zone $binary_remote_addr zone=api_auth:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=frontend_assets:10m rate=50r/s;

    # (선택 사항) 특정 Origin만 허용하기 위한 map (프로덕션 권장)
    # map $http_origin $allowed_cors_origin {
    #     default ""; # 기본적으로는 빈 값 (허용 안 함)
    #     "http://localhost:3000" $http_origin;
    #     "https://your-frontend-domain.com" $http_origin;
    #     # 필요에 따라 다른 허용된 Origin 추가
    # }
    # 위 map을 사용하려면 cors.conf 파일의 'Access-Control-Allow-Origin' '$http_origin' always; 를
    # 'Access-Control-Allow-Origin' $allowed_cors_origin always; 로 변경하고,
    # $allowed_cors_origin이 빈 문자열일 때 헤더가 추가되지 않도록 if ($allowed_cors_origin) { ... } 로 감쌀 수 있습니다.

    server {
        listen 80 default_server;
        server_name localhost your-actual-domain.com;

        # 헬스체크 엔드포인트
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Auth Service 라우팅
        location /api/auth/ {
            include snippets/cors.conf; # CORS 설정 포함

            limit_req zone=api_auth burst=10 nodelay;
            proxy_pass http://auth_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }

        # User Service 라우팅
        location /api/users/ {
            include snippets/cors.conf; # CORS 설정 포함

            limit_req zone=api_general burst=20 nodelay;
            proxy_pass http://auth_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }

        # Post Service 라우팅
        location /api/posts/ {
            include snippets/cors.conf; # CORS 설정 포함

            limit_req zone=api_general burst=20 nodelay;
            proxy_pass http://post_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header Authorization $http_authorization;
            proxy_connect_timeout 5s;
            proxy_send_timeout 15s;
            proxy_read_timeout 15s;
        }

        # Comment Service 라우팅
        location ~ ^/api/(posts/[^/]+/comments|comments)/ {
            include snippets/cors.conf; # CORS 설정 포함

            limit_req zone=api_general burst=20 nodelay;
            proxy_pass http://comment_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header Authorization $http_authorization;
            proxy_connect_timeout 5s;
            proxy_send_timeout 15s;
            proxy_read_timeout 15s;
        }

        # Frontend 라우팅
        location / {
            limit_req zone=frontend_assets burst=50 nodelay;
            proxy_pass http://frontend_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            location ~* \.(?:css|js|map|jpe?g|png|gif|ico|svg|woff2?|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                access_log off;
                # try_files $uri @frontend_service; # 만약 frontend_service가 정적 파일 서버이고 SPA 라우팅이 필요하다면
            }
            # SPA 라우팅을 위한 try_files (frontend_service가 정적 파일을 직접 서빙하는 경우)
            # try_files $uri $uri/ /index.html;
        }

        # API 엔드포인트가 명시적으로 매칭되지 않았을 때의 404 처리
        # 이 location은 다른 /api/* location보다 우선순위가 낮게 설정되어야 합니다.
        # 일반적으로는 각 업스트림 서비스가 자신의 경로에 대한 404를 처리하도록 하는 것이 좋습니다.
        # 이 블록은 최후의 수단으로, 명시적으로 정의되지 않은 /api/ 하위 경로에 대한 요청을 처리합니다.
        location /api/ {
            # 이 블록에 도달했다는 것은 위에서 정의한 구체적인 API location에 매칭되지 않았다는 의미입니다.
            # 이 경우, CORS 헤더가 필요할 수 있으므로 include 해줍니다.
            include snippets/cors.conf;

            return 404 '{"error": "Not Found", "message": "The requested API endpoint does not exist."}';
            add_header Content-Type application/json;
        }


        # 전역 에러 페이지 (JSON 반환 및 CORS 헤더 포함)
        error_page 400 /error_400.json;
        error_page 401 /error_401.json;
        error_page 403 /error_403.json;
        error_page 404 /error_404.json;
        error_page 500 502 503 504 /error_50x.json;

        location = /error_400.json {
            internal;
            include snippets/cors.conf; # 에러 응답에도 CORS 헤더 추가
            return 400 '{"error": "Bad Request", "message": "The server could not understand the request due to invalid syntax."}';
            add_header Content-Type application/json;
        }
        location = /error_401.json {
            internal;
            include snippets/cors.conf;
            return 401 '{"error": "Unauthorized", "message": "Authentication is required and has failed or has not yet been provided."}';
            add_header Content-Type application/json;
        }
        location = /error_403.json {
            internal;
            include snippets/cors.conf;
            return 403 '{"error": "Forbidden", "message": "You do not have permission to access this resource."}';
            add_header Content-Type application/json;
        }
        location = /error_404.json { # 일반 페이지 Not Found
            internal;
            # 프론트엔드 SPA의 경우, 일반적인 404는 index.html로 라우팅되어 프론트엔드 라우터가 처리하도록 하는 것이 일반적입니다.
            # location / 블록의 try_files 지시어를 참고하세요.
            # 여기서는 API 스타일의 JSON 404를 반환하는 예시입니다.
            # 만약 프론트엔드 404 페이지를 위한 것이라면, 이 location은 다르게 처리해야 합니다.
            include snippets/cors.conf;
            return 404 '{"error": "Not Found", "message": "The requested resource could not be found."}';
            add_header Content-Type application/json;
        }
        location = /error_50x.json {
            internal;
            include snippets/cors.conf;
            return 500 '{"error": "Internal Server Error", "message": "The server encountered an internal error and was unable to complete your request."}';
            add_header Content-Type application/json;
        }
    }

    # HTTPS 설정 (프로덕션 환경에서는 필수)
    # SSL 인증서가 준비되어 있다면 아래 주석을 해제하고 경로를 맞게 수정합니다.
    # server {
    #     listen 443 ssl http2;
    #     server_name your-actual-domain.com;
    #
    #     ssl_certificate /etc/letsencrypt/live/your-actual-domain.com/fullchain.pem;
    #     ssl_certificate_key /etc/letsencrypt/live/your-actual-domain.com/privkey.pem;
    #     include /etc/letsencrypt/options-ssl-nginx.conf; # SSL 보안 강화 설정
    #     ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;   # DH 파라미터
    #
    #     # HTTP 요청을 HTTPS로 리다이렉트 (위의 80 포트 서버 블록에서 처리하거나 여기서)
    #     # if ($scheme != "https") {
    #     #     return 301 https://$host$request_uri;
    #     # }
    #
    #     # ... (위의 server 블록 내용과 동일하게 라우팅, CORS, 보안 헤더 등 설정) ...
    #     # 단, listen 포트와 SSL 관련 설정만 다름
    # }

    # HTTP를 HTTPS로 리다이렉션하는 별도 서버 블록 (HTTPS 서버 블록이 위에 정의된 경우)
    # server {
    #    listen 80;
    #    server_name your-actual-domain.com;
    #    return 301 https://$server_name$request_uri;
    # }
}