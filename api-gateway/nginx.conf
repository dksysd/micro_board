events {
    worker_connections 1024;
}

http {
    # 기본 설정
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # DNS 해결을 위한 resolver 설정 (Docker 내부 DNS)
    resolver 127.0.0.11 valid=30s;

    # 로그 형식 설정
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # 성능 최적화
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;

    # Gzip 압축
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied any;
    gzip_types
        application/javascript
        application/json
        application/xml
        text/css
        text/plain
        text/xml;

    # 보안 헤더
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Rate Limiting 설정
    limit_req_zone $binary_remote_addr zone=api_general:10m rate=20r/s;
    limit_req_zone $binary_remote_addr zone=api_auth:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=frontend_assets:10m rate=50r/s;

    server {
        listen 80 default_server;
        server_name localhost;

        # 변수를 사용한 동적 upstream 해결
        set $auth_service "auth-service:3001";
        set $post_service "post-service:3002";
        set $comment_service "comment-service:3003";
        set $frontend_service "frontend:3000";

        # 헬스체크 엔드포인트
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Auth Service 라우팅
        location /api/auth/ {
            include snippets/cors.conf;
            limit_req zone=api_auth burst=10 nodelay;

            proxy_pass http://$auth_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }

        # User Service 라우팅
        location /api/users/ {
            include snippets/cors.conf;
            limit_req zone=api_general burst=20 nodelay;

            proxy_pass http://$auth_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }

        # Post Service 라우팅
        location /api/posts/ {
            include snippets/cors.conf;
            limit_req zone=api_general burst=20 nodelay;

            proxy_pass http://$post_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header Authorization $http_authorization;
            proxy_connect_timeout 5s;
            proxy_send_timeout 15s;
            proxy_read_timeout 15s;
        }

        # Comment Service 라우팅
        location ~ ^/api/(posts/[^/]+/comments|comments)/ {
            include snippets/cors.conf;
            limit_req zone=api_general burst=20 nodelay;

            proxy_pass http://$comment_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header Authorization $http_authorization;
            proxy_connect_timeout 5s;
            proxy_send_timeout 15s;
            proxy_read_timeout 15s;
        }

        # Frontend 라우팅
        location / {
            limit_req zone=frontend_assets burst=50 nodelay;

            proxy_pass http://$frontend_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            location ~* \.(?:css|js|map|jpe?g|png|gif|ico|svg|woff2?|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                access_log off;
            }
        }

        # API 404 처리
        location /api/ {
            include snippets/cors.conf;
            return 404 '{"error": "Not Found", "message": "The requested API endpoint does not exist."}';
            add_header Content-Type application/json;
        }

        # 전역 에러 페이지
        error_page 400 /error_400.json;
        error_page 401 /error_401.json;
        error_page 403 /error_403.json;
        error_page 404 /error_404.json;
        error_page 500 502 503 504 /error_50x.json;

        location = /error_400.json {
            internal;
            include snippets/cors.conf;
            return 400 '{"error": "Bad Request", "message": "The server could not understand the request due to invalid syntax."}';
            add_header Content-Type application/json;
        }
        location = /error_401.json {
            internal;
            include snippets/cors.conf;
            return 401 '{"error": "Unauthorized", "message": "Authentication is required and has failed or has not yet been provided."}';
            add_header Content-Type application/json;
        }
        location = /error_403.json {
            internal;
            include snippets/cors.conf;
            return 403 '{"error": "Forbidden", "message": "You do not have permission to access this resource."}';
            add_header Content-Type application/json;
        }
        location = /error_404.json {
            internal;
            include snippets/cors.conf;
            return 404 '{"error": "Not Found", "message": "The requested resource could not be found."}';
            add_header Content-Type application/json;
        }
        location = /error_50x.json {
            internal;
            include snippets/cors.conf;
            return 500 '{"error": "Internal Server Error", "message": "The server encountered an internal error and was unable to complete your request."}';
            add_header Content-Type application/json;
        }
    }
}