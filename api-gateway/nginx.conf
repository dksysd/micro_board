events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # DNS resolver for Docker internal network
    resolver 127.0.0.11 valid=30s;

    # 로그 설정
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time" '
                    'upstream_addr="$upstream_addr" service="$service_name"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log debug;

    # 기본 설정
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;

    server {
        listen 80;
        server_name localhost;

        # 🔥 서비스 주소 변수 정의 (런타임에 해석)
        set $auth_service "auth-service:3001";
        set $post_service "post-service:3002";
        set $comment_service "comment-service:3003";

        # 🔥 헬스체크 엔드포인트
        location /health {
            access_log off;
            return 200 "API Gateway healthy\n";
            add_header Content-Type text/plain;
        }

        # 🔥 API Gateway 상태 확인
        location /debug {
            access_log off;
            return 200 "API Gateway Debug:
Services:
- auth-service: http://$auth_service
- post-service: http://$post_service
- comment-service: http://$comment_service
Time: $time_iso8601
";
            add_header Content-Type text/plain;
        }

        # ============================================
        # 🔥 Auth Service 라우팅 (정규표현식으로 모든 하위 경로 매칭)
        # ============================================
        location ~ ^/api/auth(/.*)?$ {
            set $service_name "auth-service";

            # 디버깅 헤더
            add_header X-Debug-Service "auth-service" always;
            add_header X-Debug-Original-URI "$request_uri" always;
            add_header X-Debug-Args "$args" always;

            # 🔥 중요: 경로를 그대로 전달 (rewrite 없음)
            # Auth Service로 프록시 (변수 사용)
            proxy_pass http://$auth_service;
            proxy_http_version 1.1;

            # 헤더 설정
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header Content-Type $http_content_type;

            # 타임아웃 설정
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # 에러 처리
            proxy_intercept_errors on;
            error_page 502 503 504 = @auth_service_error;
        }

        # Auth Users 라우팅 (auth-service의 /api/users)
        location ~ ^/api/users(/.*)?$ {
            set $service_name "auth-service";

            # 디버깅 헤더
            add_header X-Debug-Service "auth-service-users" always;
            add_header X-Debug-Original-URI "$request_uri" always;
            add_header X-Debug-Args "$args" always;

            # 🔥 중요: 경로를 그대로 전달 (rewrite 없음)
            proxy_pass http://$auth_service;
            proxy_http_version 1.1;

            # 헤더 설정
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header Content-Type $http_content_type;

            # 타임아웃 설정
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # 에러 처리
            proxy_intercept_errors on;
            error_page 502 503 504 = @auth_service_error;
        }

        # ============================================
        # 🔥 Post Service 라우팅 (정규표현식으로 모든 하위 경로 매칭)
        # ============================================
        location ~ ^/api/posts(/.*)?$ {
            set $service_name "post-service";

            # 디버깅 헤더
            add_header X-Debug-Service "post-service" always;
            add_header X-Debug-Original-URI "$request_uri" always;
            add_header X-Debug-Args "$args" always;
            add_header X-Debug-Method "$request_method" always;

            # 🔥 중요: 경로를 그대로 전달 (rewrite 없음)
            # Post Service로 프록시 (변수 사용)
            proxy_pass http://$post_service;
            proxy_http_version 1.1;

            # 헤더 설정
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header Content-Type $http_content_type;

            # 타임아웃 설정
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # 에러 처리
            proxy_intercept_errors on;
            error_page 502 503 504 = @post_service_error;
        }

        # ============================================
        # 🔥 Comment Service 라우팅 (정규표현식으로 모든 하위 경로 매칭)
        # ============================================
        location ~ ^/api/comments(/.*)?$ {
            set $service_name "comment-service";

            # 디버깅 헤더
            add_header X-Debug-Service "comment-service" always;
            add_header X-Debug-Original-URI "$request_uri" always;
            add_header X-Debug-Args "$args" always;

            # 🔥 중요: 경로를 그대로 전달 (rewrite 없음)
            # Comment Service로 프록시 (변수 사용)
            proxy_pass http://$comment_service;
            proxy_http_version 1.1;

            # 헤더 설정
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header Content-Type $http_content_type;

            # 타임아웃 설정
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # 에러 처리
            proxy_intercept_errors on;
            error_page 502 503 504 = @comment_service_error;
        }

        # ============================================
        # 🔥 서비스별 에러 핸들러
        # ============================================
        location @auth_service_error {
            add_header Content-Type application/json always;
            add_header X-Debug-Error "auth-service-unavailable" always;
            return 502 '{"error": "Auth Service Unavailable", "message": "Authentication service is currently unavailable", "timestamp": "$time_iso8601"}';
        }

        location @post_service_error {
            add_header Content-Type application/json always;
            add_header X-Debug-Error "post-service-unavailable" always;
            return 502 '{"error": "Post Service Unavailable", "message": "Post service is currently unavailable", "timestamp": "$time_iso8601"}';
        }

        location @comment_service_error {
            add_header Content-Type application/json always;
            add_header X-Debug-Error "comment-service-unavailable" always;
            return 502 '{"error": "Comment Service Unavailable", "message": "Comment service is currently unavailable", "timestamp": "$time_iso8601"}';
        }

        # ============================================
        # 🔥 서비스 헬스체크 테스트 엔드포인트
        # ============================================
        location /debug/auth {
            access_log off;
            proxy_pass http://$auth_service/health;
            proxy_connect_timeout 5s;
            proxy_read_timeout 5s;
            add_header X-Debug-Test "auth-service-connection" always;
        }

        location /debug/posts {
            access_log off;
            proxy_pass http://$post_service/health;
            proxy_connect_timeout 5s;
            proxy_read_timeout 5s;
            add_header X-Debug-Test "post-service-connection" always;
        }

        location /debug/comments {
            access_log off;
            proxy_pass http://$comment_service/health;
            proxy_connect_timeout 5s;
            proxy_read_timeout 5s;
            add_header X-Debug-Test "comment-service-connection" always;
        }

        # ============================================
        # 기본 응답
        # ============================================
        location / {
            return 404 '{"error": "Not Found", "message": "API endpoint not found", "available_endpoints": ["/api/auth", "/api/posts", "/api/comments", "/api/users"], "timestamp": "$time_iso8601"}';
            add_header Content-Type application/json;
        }
    }
}